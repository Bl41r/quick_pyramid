$$generic-route$$
@view_config(route_name="[ROUTE_NAME]", renderer="[TEMPLATE]",
             permission="[PERMISSION]")
def [ROUTE_NAME](request):
    """Route for [ROUTE_NAME]."""

    return {}
$$-$$

$$logout-route$$
@view_config(route_name='logout')
def logout(request):
    """Logout route."""
    headers = forget(request)
    return HTTPFound(request.route_url('login'), headers=headers)
$$-$$

$$login-route$$
@view_config(route_name='login', renderer='templates/login.jinja2')
def login(request):
    """Login route."""
    if request.method == 'POST':
        username = request.params.get('username', '')
        password = request.params.get('password', '')
        
        if check_credentials(request, username, password):
            headers = remember(request, username)
            
            try:
                query = request.dbsession.query(Users)
                user = query.filter_by(username=username).first()
                user.date_last_logged = datetime.datetime.now()
            except DBAPIError:  # pragma: no cover
                return Response(db_err_msg, content_type='text/plain',
                                status=500)
            return HTTPFound(location=request.route_url('[LOGIN_SUCCESS]'),
                             headers=headers)
        else:
            return {'error': "Username-Password combination not recognized."}
    
    return {'error': ''}
$$-$$

$$check-credentials$$
def check_credentials(request, username, password):
    is_auth = False
    try:
        query = request.dbsession.query(Users)
        user_data = query.filter_by(username=username).first()
    except DBAPIError:
        return is_auth
    
    if user_data:
        stored_password = user_data.pass_hash
        try:
            is_auth = pwd_context.verify(password, stored_password)
        except ValueError:
            pass
    
    return is_auth
$$-$$

$$my-root$$
class MyRoot(object):
    """Root for app-level permissions."""

    def __init__(self, request):
        self.request = request

    def __acl__(self):
        base_list = [
            (Allow, Everyone, 'view'),
            (Allow, Authenticated, 'secret'),
        ]

        if self.request.authenticated_userid:
            current_user = self.request.dbsession.query(Users).filter(
                Users.username == self.request.authenticated_userid
            ).first()
            if current_user and current_user.is_admin:
                base_list.append((Allow, self.request.authenticated_userid,
                                 'admin'))
        return base_list
$$-$$

$$includeme-auth$$
def includeme(config):
    """Security Configuration."""
    auth_secret = os.environ.get('AUTH_SECRET', '')
    authn_policy = AuthTktAuthenticationPolicy(
        secret=auth_secret,
        hashalg='sha512'
    )
    
    config.set_authentication_policy(authn_policy)
    authz_policy = ACLAuthorizationPolicy()
    config.set_authorization_policy(authz_policy)
    config.set_default_permission('view')
    config.set_root_factory(MyRoot)

    # CSRF
    session_secret = os.environ.get('SESSION_SECRET', '')
    session_factory = SignedCookieSessionFactory(session_secret)
    config.set_session_factory(session_factory)
    config.set_default_csrf_options(require_csrf=True)
$$-$$






